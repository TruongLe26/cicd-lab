name: CI Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  CONTAINER_TEST_IMAGE: ${{ github.repository }}/${{ github.sha }}

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: maven-${{ github.repository }}
          restore-keys: maven-
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: '21'
      - name: Build with Maven (skip tests)
        run: ./mvnw clean package -DskipTests
      - name: Upload JAR artifact
        uses: actions/upload-artifact@v3
        with:
          name: app
          path: target/*.jar

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: '21'
      - name: Restore Maven cache
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: maven-${{ github.repository }}
          restore-keys: maven-
      - name: Run tests
        run: ./mvnw test

  deploy:
    runs-on: ubuntu-latest
    needs: [ build, test ]

    steps:
      - name: Checkout source
        uses: actions/checkout@v3
      - name: Download app JAR
        uses: actions/download-artifact@v3
        with:
          name: app-jar
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build Docker image
        run: |
          docker build -t ${{ env.CONTAINER_TEST_IMAGE }} .
      - name: Push Docker image
        run: |
          docker push ${{ env.CONTAINER_TEST_IMAGE }}
      - name: Run docker-compose up
        run: |
          docker-compose -f docker-compose.yml up -d
        env:
          CONTAINER_TEST_IMAGE: ${{ env.CONTAINER_TEST_IMAGE }}
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
          MYSQL_USERNAME: ${{ secrets.MYSQL_USERNAME }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          DATABASE_URL: ${{ env.DATABASE_URL }}